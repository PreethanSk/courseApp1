// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  email String @unique
  firstName String
  bio String?
  avatar_url String?
  role StudentRole @default(student)
  isActive Boolean @default(true)
  cart Cart?
  purchaseIds Purchase[] @relation("UserPurchases")
  purchasedCourses Course[] @relation("UserCourses")
  enrollment Enrollment[]
  activityLogs ActivityLog[]
  reviews Review[]
  lessonProgress LessonProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userOtp String?
  otpExpiresAt DateTime?

  @@index([role])
  @@index([createdAt])
  @@index([isActive])
}

enum StudentRole{
  student
  instructor
}

model Admin{
  id Int @id @default(autoincrement())
  username String @unique
  password String
  email String @unique
  firstName String
  courses Course[]
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  AdminOtp String @default("0")
  otpExpiresAt DateTime?

  @@index([createdAt])
  @@index([isActive])
}

model Course{
  id Int @id @default(autoincrement())
  courseName String
  shortDescription String?
  currency String @default("USD")
  description String
  price Decimal @db.Decimal(10,2)
  adminId Int
  slug String @unique
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  cartItem CartItem[]
  users User[] @relation("UserCourses")
  modules Module[]
  lessons Lesson[]
  enrollment Enrollment[]
  activityLogs ActivityLog[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
  @@index([price])
  @@index([createdAt])
  @@index([courseName])
  @@index([slug])
}

model Module{
  id Int @id @default(autoincrement())
  title String
  sortIndex Int @default(0)
  courseId Int
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([sortIndex])
}

model Lesson{
  id Int @id @default(autoincrement())
  title String
  content String?
  lessonType String @default("video")
  mediaId Int?
  media Media? @relation(fields: [mediaId], references: [id])
  moduleId Int
  module Module @relation(fields: [moduleId], references: [id])
  courseId Int
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  activityLogs ActivityLog[]
  progress LessonProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([moduleId])
  @@index([lessonType])
}

model Media{
  id Int @id @default(autoincrement())
  storageKey String @unique
  url String?
  mimeType String?
  sizeBytes BigInt?
  lessons Lesson[]
  durationSeconds Int?
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([mimeType])
}

model Enrollment{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId Int
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  progress Float @default(0.0)
  status String @default("active")
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([enrolledAt])
}

model LessonProgress{
  id Int @id @default(autoincrement())
  userId Int
  lessonId Int
  completed Boolean @default(false)
  completedAt DateTime?
  lastWatchedAt DateTime?
  progress Float @default(0.0)
  user User @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([lessonId])
}

model Review{
  id Int @id @default(autoincrement())
  userId Int
  courseId Int
  RatingStar RatingStar
  Title String?
  Description String?
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([userId])
  @@index([RatingStar])
  @@unique([userId, courseId])
}
enum RatingStar{
  one
  two
  three
  four
  five
}

model ActivityLog{
  id Int @id @default(autoincrement())
  userId Int
  courseId Int
  lessonId Int
  user User @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
  action String
  meta Json
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
  @@index([lessonId])
  @@index([createdAt])
}

model Cart{
  id Int @id @default(autoincrement())
  userId Int @unique
  cartItem CartItem[]
  total Int @default(0)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchaseIds Purchase[] @relation("CartPurchases")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

model CartItem{
  id Int @id @default(autoincrement())
  courseId Int
  quantity Int
  cartId Int
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, courseId])
  @@index([courseId])
}

model Purchase{
  id Int @id @default(autoincrement())
  cartId Int?
  userId Int
  totalPrice BigInt
  purchaseStatus PurchaseStatus
  currency String
  provider String
  providerPaymentId String
  cart Cart? @relation("CartPurchases",fields: [cartId], references: [id])
  user User @relation("UserPurchases",fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([purchaseStatus])
  @@index([createdAt])
  @@unique([providerPaymentId])
}

enum PurchaseStatus {
  success
  failed
  pending
}