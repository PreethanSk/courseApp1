
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  firstName: 'firstName',
  bio: 'bio',
  avatar_url: 'avatar_url',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userOtp: 'userOtp',
  otpExpiresAt: 'otpExpiresAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  firstName: 'firstName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  AdminOtp: 'AdminOtp',
  otpExpiresAt: 'otpExpiresAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  courseName: 'courseName',
  shortDescription: 'shortDescription',
  currency: 'currency',
  description: 'description',
  price: 'price',
  adminId: 'adminId',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  sortIndex: 'sortIndex',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  lessonType: 'lessonType',
  mediaId: 'mediaId',
  moduleId: 'moduleId',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  storageKey: 'storageKey',
  url: 'url',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  durationSeconds: 'durationSeconds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  progress: 'progress',
  status: 'status'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  completed: 'completed',
  completedAt: 'completedAt',
  lastWatchedAt: 'lastWatchedAt',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  RatingStar: 'RatingStar',
  Title: 'Title',
  Description: 'Description',
  createdAt: 'createdAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  lessonId: 'lessonId',
  action: 'action',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  quantity: 'quantity',
  cartId: 'cartId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  userId: 'userId',
  totalPrice: 'totalPrice',
  purchaseStatus: 'purchaseStatus',
  currency: 'currency',
  provider: 'provider',
  providerPaymentId: 'providerPaymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.StudentRole = exports.$Enums.StudentRole = {
  student: 'student',
  instructor: 'instructor'
};

exports.RatingStar = exports.$Enums.RatingStar = {
  one: 'one',
  two: 'two',
  three: 'three',
  four: 'four',
  five: 'five'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  success: 'success',
  failed: 'failed',
  pending: 'pending'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Course: 'Course',
  Module: 'Module',
  Lesson: 'Lesson',
  Media: 'Media',
  Enrollment: 'Enrollment',
  LessonProgress: 'LessonProgress',
  Review: 'Review',
  ActivityLog: 'ActivityLog',
  Cart: 'Cart',
  CartItem: 'CartItem',
  Purchase: 'Purchase'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\practiceCode\\courseAppc\\backend\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\practiceCode\\courseAppc\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id               Int              @id @default(autoincrement())\n  username         String           @unique\n  password         String\n  email            String           @unique\n  firstName        String\n  bio              String?\n  avatar_url       String?\n  role             StudentRole      @default(student)\n  isActive         Boolean          @default(true)\n  cart             Cart?\n  purchaseIds      Purchase[]       @relation(\"UserPurchases\")\n  purchasedCourses Course[]         @relation(\"UserCourses\")\n  enrollment       Enrollment[]\n  activityLogs     ActivityLog[]\n  reviews          Review[]\n  lessonProgress   LessonProgress[]\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n  userOtp          String?\n  otpExpiresAt     DateTime?\n\n  @@index([role])\n  @@index([createdAt])\n  @@index([isActive])\n}\n\nenum StudentRole {\n  student\n  instructor\n}\n\nmodel Admin {\n  id           Int       @id @default(autoincrement())\n  username     String    @unique\n  password     String\n  email        String    @unique\n  firstName    String\n  courses      Course[]\n  isActive     Boolean   @default(true)\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n  AdminOtp     String    @default(\"0\")\n  otpExpiresAt DateTime?\n\n  @@index([createdAt])\n  @@index([isActive])\n}\n\nmodel Course {\n  id               Int           @id @default(autoincrement())\n  courseName       String\n  shortDescription String?\n  currency         String        @default(\"USD\")\n  description      String\n  price            Decimal       @db.Decimal(10, 2)\n  adminId          Int\n  slug             String        @unique\n  admin            Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)\n  cartItem         CartItem[]\n  users            User[]        @relation(\"UserCourses\")\n  modules          Module[]\n  lessons          Lesson[]\n  enrollment       Enrollment[]\n  activityLogs     ActivityLog[]\n  reviews          Review[]\n  createdAt        DateTime      @default(now())\n  updatedAt        DateTime      @updatedAt\n\n  @@index([adminId])\n  @@index([price])\n  @@index([createdAt])\n  @@index([courseName])\n  @@index([slug])\n}\n\nmodel Module {\n  id        Int      @id @default(autoincrement())\n  title     String\n  sortIndex Int      @default(0)\n  courseId  Int\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  lessons   Lesson[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([courseId])\n  @@index([sortIndex])\n}\n\nmodel Lesson {\n  id           Int              @id @default(autoincrement())\n  title        String\n  content      String?\n  lessonType   String           @default(\"video\")\n  mediaId      Int?\n  media        Media?           @relation(fields: [mediaId], references: [id])\n  moduleId     Int\n  module       Module           @relation(fields: [moduleId], references: [id])\n  courseId     Int\n  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  activityLogs ActivityLog[]\n  progress     LessonProgress[]\n  createdAt    DateTime         @default(now())\n  updatedAt    DateTime         @updatedAt\n\n  @@index([courseId])\n  @@index([moduleId])\n  @@index([lessonType])\n}\n\nmodel Media {\n  id              Int      @id @default(autoincrement())\n  storageKey      String   @unique\n  url             String?\n  mimeType        String?\n  sizeBytes       BigInt?\n  lessons         Lesson[]\n  durationSeconds Int?\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  @@index([mimeType])\n}\n\nmodel Enrollment {\n  id         Int      @id @default(autoincrement())\n  userId     Int\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  courseId   Int\n  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  enrolledAt DateTime @default(now())\n  progress   Float    @default(0.0)\n  status     String   @default(\"active\")\n\n  @@unique([userId, courseId])\n  @@index([userId])\n  @@index([courseId])\n  @@index([status])\n  @@index([enrolledAt])\n}\n\nmodel LessonProgress {\n  id            Int       @id @default(autoincrement())\n  userId        Int\n  lessonId      Int\n  completed     Boolean   @default(false)\n  completedAt   DateTime?\n  lastWatchedAt DateTime?\n  progress      Float     @default(0.0)\n  user          User      @relation(fields: [userId], references: [id])\n  lesson        Lesson    @relation(fields: [lessonId], references: [id])\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  @@index([userId])\n  @@index([lessonId])\n}\n\nmodel Review {\n  id          Int        @id @default(autoincrement())\n  userId      Int\n  courseId    Int\n  RatingStar  RatingStar\n  Title       String?\n  Description String?\n  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  createdAt   DateTime   @default(now())\n  UpdatedAt   DateTime   @updatedAt\n\n  @@unique([userId, courseId])\n  @@index([courseId])\n  @@index([userId])\n  @@index([RatingStar])\n}\n\nenum RatingStar {\n  one\n  two\n  three\n  four\n  five\n}\n\nmodel ActivityLog {\n  id        Int      @id @default(autoincrement())\n  userId    Int\n  courseId  Int\n  lessonId  Int\n  user      User     @relation(fields: [userId], references: [id])\n  course    Course   @relation(fields: [courseId], references: [id])\n  lesson    Lesson   @relation(fields: [lessonId], references: [id])\n  action    String\n  meta      Json\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([courseId])\n  @@index([lessonId])\n  @@index([createdAt])\n}\n\nmodel Cart {\n  id          Int        @id @default(autoincrement())\n  userId      Int        @unique\n  cartItem    CartItem[]\n  total       Int        @default(0)\n  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  purchaseIds Purchase[] @relation(\"CartPurchases\")\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n\n  @@index([createdAt])\n}\n\nmodel CartItem {\n  id        Int      @id @default(autoincrement())\n  courseId  Int\n  quantity  Int\n  cartId    Int\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([cartId, courseId])\n  @@index([courseId])\n}\n\nmodel Purchase {\n  id                Int            @id @default(autoincrement())\n  cartId            Int?\n  userId            Int\n  totalPrice        BigInt\n  purchaseStatus    PurchaseStatus\n  currency          String\n  provider          String\n  providerPaymentId String\n  cart              Cart?          @relation(\"CartPurchases\", fields: [cartId], references: [id])\n  user              User           @relation(\"UserPurchases\", fields: [userId], references: [id])\n  createdAt         DateTime       @default(now())\n  updatedAt         DateTime       @updatedAt\n\n  @@unique([providerPaymentId])\n  @@index([userId])\n  @@index([purchaseStatus])\n  @@index([createdAt])\n}\n\nenum PurchaseStatus {\n  success\n  failed\n  pending\n}\n",
  "inlineSchemaHash": "ef2bb42c3979f11774a218ae7844b441f83429bfb13124d5d875c53d548e19d5",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar_url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"StudentRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"cart\",\"kind\":\"object\",\"type\":\"Cart\",\"relationName\":\"CartToUser\"},{\"name\":\"purchaseIds\",\"kind\":\"object\",\"type\":\"Purchase\",\"relationName\":\"UserPurchases\"},{\"name\":\"purchasedCourses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"UserCourses\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToUser\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUser\"},{\"name\":\"lessonProgress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userOtp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"otpExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Admin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"AdminToCourse\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"AdminOtp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"otpExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"AdminToCourse\"},{\"name\":\"cartItem\",\"kind\":\"object\",\"type\":\"CartItem\",\"relationName\":\"CartItemToCourse\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserCourses\"},{\"name\":\"modules\",\"kind\":\"object\",\"type\":\"Module\",\"relationName\":\"CourseToModule\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"CourseToLesson\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToCourse\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"CourseToReview\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Module\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToModule\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToModule\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Lesson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lessonType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mediaId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"media\",\"kind\":\"object\",\"type\":\"Media\",\"relationName\":\"LessonToMedia\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"module\",\"kind\":\"object\",\"type\":\"Module\",\"relationName\":\"LessonToModule\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToLesson\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToLesson\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonToLessonProgress\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Media\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"storageKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mimeType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sizeBytes\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToMedia\"},{\"name\":\"durationSeconds\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"LessonProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastWatchedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToLessonProgress\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"RatingStar\",\"kind\":\"enum\",\"type\":\"RatingStar\"},{\"name\":\"Title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToReview\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"UpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ActivityLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ActivityLogToUser\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"ActivityLogToCourse\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"ActivityLogToLesson\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Cart\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cartItem\",\"kind\":\"object\",\"type\":\"CartItem\",\"relationName\":\"CartToCartItem\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CartToUser\"},{\"name\":\"purchaseIds\",\"kind\":\"object\",\"type\":\"Purchase\",\"relationName\":\"CartPurchases\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CartItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cartId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CartItemToCourse\"},{\"name\":\"cart\",\"kind\":\"object\",\"type\":\"Cart\",\"relationName\":\"CartToCartItem\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Purchase\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cartId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"purchaseStatus\",\"kind\":\"enum\",\"type\":\"PurchaseStatus\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerPaymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cart\",\"kind\":\"object\",\"type\":\"Cart\",\"relationName\":\"CartPurchases\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserPurchases\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

