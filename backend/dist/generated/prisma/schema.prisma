// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  username         String     @unique
  password         String
  email            String     @unique
  firstName        String
  cart             Cart?
  purchaseIds      Purchase[]
  purchasedCourses Course[]   @relation("UserCourses")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  firstName String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          Int        @id @default(autoincrement())
  courseName  String
  description String
  price       BigInt
  adminId     Int
  admin       Admin      @relation(fields: [adminId], references: [id])
  cartItem    CartItem[]
  users       User[]     @relation("UserCourses")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  cartItem    CartItem[]
  total       Int        @default(0)
  user        User       @relation(fields: [userId], references: [id])
  purchaseIds Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  courseId  Int
  quantity  Int
  cartId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id             Int            @id @default(autoincrement())
  cartId         Int
  userId         Int
  totalPrice     BigInt
  purchaseStatus PurchaseStatus
  cart           Cart           @relation(fields: [cartId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum PurchaseStatus {
  success
  failed
  pending
}
